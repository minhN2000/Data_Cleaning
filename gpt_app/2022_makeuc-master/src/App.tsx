import React, { useEffect, useState } from 'react';
import { Box, Button, Divider, TextField, Typography } from '@mui/material';

let didInit = false;

function App() {
  const [file, setFile] = useState<File>();
  const [filename, setFilename] = useState('');
  const [instruction, setInstruction] = useState(
    'Type your instructions here.'
  );
  const [output, setOutput] = useState(
    'Here is the output for the instructions.'
  );
  const [code, setCode] = useState('Here is the code generated by gpt-3.');

  useEffect(() => {
    if (!didInit) {
      didInit = true;
      const tInstruction = window.localStorage.getItem('instruction');
      if (tInstruction) {
        setInstruction(tInstruction);
      }
      const tOutput = window.localStorage.getItem('output');
      if (tOutput) {
        setOutput(tOutput);
      }
      const tCode = window.localStorage.getItem('code');
      if (tCode) {
        setCode(tCode);
      }
    }
  }, []);

  useEffect(() => {
    window.localStorage.setItem('instruction', instruction);
  }, [instruction]);
  useEffect(() => {
    window.localStorage.setItem('output', output);
  }, [output]);
  useEffect(() => {
    window.localStorage.setItem('code', code);
  }, [code]);

  function handleFileChange(event: React.ChangeEvent<HTMLInputElement>) {
    if (event.target.files && event.target.files.length > 0) {
      let filename = event.target.files[0].name;
      // https://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
      let re = /(?:\.([^.]+))?$/;
      let exts = re.exec(filename);
      if (exts && exts[1] === 'csv') {
        setFilename(filename);
        setFile(event.target.files[0]);
      } else if (exts) {
        setFilename('Invalid file extension ".' + exts[1] + '".');
      } else {
        setFilename('Invalid file extension.');
      }
    }
  }

  function handleInstructionChange(event: React.ChangeEvent<HTMLInputElement>) {
    setInstruction(event.target.value);
  }

  function handleSubmit() {
    // File check logic
    if (!file) {
      return;
    }
    if (instruction === 'Type your instructions here.') {
      return;
    }

    // Request logic
    const formData = new FormData();
    formData.append('csvFile', file);
    formData.append('instruction', instruction);
    const config = {
      method: 'POST',
      body: formData,
    };
    fetch('http://localhost:5000/', config)
      .then((response) => {
        // Handle success response
        const data = response.json();
        console.log(data);
        return data;
      })
      .then((data) => {
        setCode(data['code']);
      })
      .catch((response) => {
        // Handle error response
        console.log(response);
      });
  }

  return (
    <div>
      <div
        style={{
          minHeight: '100vh',
          alignItems: 'center',
          fontSize: 'calc(10px + 2vmin)',
        }}
      >
        <Box
          sx={{
            width: '100vw',
            height: 'calc(10vh - 1px)',
            alignItems: 'center',
            display: 'flex',
            justifyContent: 'space-between',
          }}
        >
          <Typography variant="h3" padding="16px">
            gpt3-With-Data
          </Typography>
          <Button
            variant="contained"
            component="label"
            style={{
              margin: '32px',
            }}
            onClick={handleSubmit}
          >
            Submit
          </Button>
        </Box>
        <Divider />
        <div style={{ width: '100vw', height: '90vh' }}>
          <Box
            sx={{
              width: '100vw',
              height: 'calc(10vh - 1px)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            <Typography variant="h5" padding="16px">
              File Input (.csv)
              {filename ? ': ' + filename : ''}
            </Typography>
            <Button variant="contained" component="label">
              Upload
              <input
                hidden
                accept=".csv"
                type="file"
                onChange={handleFileChange}
              />
            </Button>
          </Box>
          <Divider />
          <div
            className="text-boxes"
            style={{ display: 'flex', height: '80vh' }}
          >
            <Box sx={{ width: '50%', padding: '16px' }}>
              <Typography variant="h5">Instruction</Typography>
              <TextField
                fullWidth
                multiline
                value={instruction}
                onChange={handleInstructionChange}
                inputProps={{
                  style: {
                    height: '120px',
                    overflow: 'auto',
                    fontFamily:
                      "source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace",
                    fontSize: '18px',
                  },
                }}
              />
              <Typography variant="h5" margin="16px 0 0 0">
                Output
              </Typography>
              <TextField
                fullWidth
                multiline
                value={output}
                inputProps={{
                  readOnly: true,
                  style: {
                    height: 'calc(80vh - (89px * 2) - 120px)',
                    overflow: 'auto',
                    fontFamily:
                      "source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace",
                    fontSize: '18px',
                  },
                }}
              />
            </Box>
            <Box sx={{ width: '50%', padding: '16px' }}>
              <Typography variant="h5">Generated Code</Typography>
              <TextField
                fullWidth
                multiline
                value={code}
                inputProps={{
                  readOnly: true,
                  style: {
                    height: 'calc(80vh - 96px)',
                    overflow: 'auto',
                    fontFamily:
                      "source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace",
                    fontSize: '18px',
                  },
                }}
              />
            </Box>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
